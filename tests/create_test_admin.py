#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
"""

import asyncio
import asyncpg
import os
from passlib.context import CryptContext

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–∏–∑–º–µ–Ω–∏—Ç–µ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
DATABASE_URL = os.getenv("TEST_DATABASE_URL", "postgresql://postgres:axewood@localhost:5432/diary_db")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

async def create_test_admin():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    
    print("üîê –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = await asyncpg.connect(DATABASE_URL)
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
        hashed_password = pwd_context.hash("admin123")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        existing_user = await conn.fetchrow(
            "SELECT id FROM users WHERE username = $1 OR email = $2",
            "test_admin", "test_admin@example.com"
        )
        
        if existing_user:
            print("‚ö†Ô∏è  –¢–µ—Å—Ç–æ–≤—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å
            await conn.execute(
                """
                UPDATE users 
                SET hashed_password = $1, is_active = true 
                WHERE username = $2 OR email = $3
                """,
                hashed_password, "test_admin", "test_admin@example.com"
            )
            print("‚úÖ –ü–∞—Ä–æ–ª—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω")
            
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id = await conn.fetchval(
                """
                INSERT INTO users (email, username, hashed_password, role, full_name, is_active)
                VALUES ($1, $2, $3, $4, $5, $6)
                RETURNING id
                """,
                "test_admin@example.com",
                "test_admin", 
                hashed_password,
                "ADMIN",
                "Test Administrator",
                True
            )
            
            print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω —Å ID: {user_id}")
        
        await conn.close()
        
        print("\nüìã –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:")
        print("   Username: test_admin")
        print("   Password: admin123")
        print("   Email: test_admin@example.com")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("   - –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å DATABASE_URL")
        print("   - –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        print("   - –í—ã–ø–æ–ª–Ω–µ–Ω—ã –ª–∏ –º–∏–≥—Ä–∞—Ü–∏–∏")

async def create_test_data():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("\nüìö –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        conn = await asyncpg.connect(DATABASE_URL)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞
        student_password = pwd_context.hash("student123")
        student_id = await conn.fetchval(
            """
            INSERT INTO users (email, username, hashed_password, role, full_name, is_active)
            VALUES ($1, $2, $3, $4, $5, $6)
            ON CONFLICT (username) DO UPDATE SET
                hashed_password = EXCLUDED.hashed_password,
                is_active = EXCLUDED.is_active
            RETURNING id
            """,
            "test_student@example.com",
            "test_student",
            student_password,
            "STUDENT",
            "Test Student",
            True
        )
        
        if student_id:
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É students
            await conn.execute(
                """
                INSERT INTO students (user_id, parent_phone, parent_email, parent_fio)
                VALUES ($1, $2, $3, $4)
                ON CONFLICT (user_id) DO UPDATE SET
                    parent_phone = EXCLUDED.parent_phone,
                    parent_email = EXCLUDED.parent_email,
                    parent_fio = EXCLUDED.parent_fio
                """,
                student_id,
                "+7123456789",
                "parent@example.com",
                "–†–æ–¥–∏—Ç–µ–ª—å –¢–µ—Å—Ç–æ–≤—ã–π"
            )
            print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Å—Ç—É–¥–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —Å ID: {student_id}")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É—á–∏—Ç–µ–ª—è
        teacher_password = pwd_context.hash("teacher123")
        teacher_id = await conn.fetchval(
            """
            INSERT INTO users (email, username, hashed_password, role, full_name, is_active)
            VALUES ($1, $2, $3, $4, $5, $6)
            ON CONFLICT (username) DO UPDATE SET
                hashed_password = EXCLUDED.hashed_password,
                is_active = EXCLUDED.is_active
            RETURNING id
            """,
            "test_teacher@example.com",
            "test_teacher",
            teacher_password,
            "TEACHER",
            "Test Teacher",
            True
        )
        
        if teacher_id:
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É teachers
            await conn.execute(
                """
                INSERT INTO teachers (user_id, degree, experience, bio)
                VALUES ($1, $2, $3, $4)
                ON CONFLICT (user_id) DO UPDATE SET
                    degree = EXCLUDED.degree,
                    experience = EXCLUDED.experience,
                    bio = EXCLUDED.bio
                """,
                teacher_id,
                "–ú–∞–≥–∏—Å—Ç—Ä",
                5,
                "–¢–µ—Å—Ç–æ–≤—ã–π —É—á–∏—Ç–µ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API"
            )
            print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —É—á–∏—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —Å ID: {teacher_id}")
        
        await conn.close()
        
        print("\nüìã –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã:")
        print("   Student - Username: test_student, Password: student123")
        print("   Teacher - Username: test_teacher, Password: teacher123")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß™ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã –¥–ª—è School Diary API\n")
    
    await create_test_admin()
    await create_test_data()
    
    print("\nüéâ –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ä–µ–¥–∞ –≥–æ—Ç–æ–≤–∞!")
    print("üìù –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å —Ç–µ—Å—Ç—ã:")
    print("   python tests/test_integration.py")
    print("   –∏–ª–∏")
    print("   pytest tests/test_integration.py -v")

if __name__ == "__main__":
    asyncio.run(main()) 