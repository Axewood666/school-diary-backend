import pytest
import asyncio
import httpx
import traceback
import sys
from typing import Dict, Optional
import io
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤
BASE_URL = "http://localhost:8000"
API_V1 = f"{BASE_URL}/api/v1"

class Colors:
    """ANSI —Ü–≤–µ—Ç–∞ –¥–ª—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞"""
    GREEN = '\033[92m'
    RED = '\033[91m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    PURPLE = '\033[95m'
    CYAN = '\033[96m'
    WHITE = '\033[97m'
    BOLD = '\033[1m'
    END = '\033[0m'

class TestLogger:
    """–ö–ª–∞—Å—Å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤"""
    
    def __init__(self):
        self.test_count = 0
        self.passed_count = 0
        self.failed_count = 0
        self.skipped_count = 0
        
    def log_test_start(self, test_name: str, description: str = ""):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –Ω–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞"""
        self.test_count += 1
        print(f"\n{Colors.BLUE}üß™ –¢–µ—Å—Ç #{self.test_count}: {test_name}{Colors.END}")
        if description:
            print(f"   üìù {description}")
    
    def log_success(self, message: str, data: dict = None):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
        self.passed_count += 1
        print(f"   {Colors.GREEN}‚úÖ {message}{Colors.END}")
        if data:
            print(f"   üìä –î–∞–Ω–Ω—ã–µ: {data}")
    
    def log_error(self, message: str, error: Exception = None, response_data: dict = None):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É"""
        self.failed_count += 1
        print(f"   {Colors.RED}‚ùå {message}{Colors.END}")
        if response_data:
            print(f"   üìÑ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response_data}")
        if error:
            print(f"   üîç –û—à–∏–±–∫–∞: {str(error)}")
            print(f"   üìã Traceback: {traceback.format_exc()}")
    
    def log_skip(self, message: str):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –ø—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞"""
        self.skipped_count += 1
        print(f"   {Colors.YELLOW}‚è≠Ô∏è  {message}{Colors.END}")
    
    def log_info(self, message: str):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
        print(f"   {Colors.CYAN}‚ÑπÔ∏è  {message}{Colors.END}")
    
    def log_warning(self, message: str):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"""
        print(f"   {Colors.YELLOW}‚ö†Ô∏è  {message}{Colors.END}")
    
    def print_summary(self):
        """–í—ã–≤–æ–¥–∏—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        total = self.passed_count + self.failed_count + self.skipped_count
        print(f"\n{Colors.BOLD}{'='*60}{Colors.END}")
        print(f"{Colors.BOLD}üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø{Colors.END}")
        print(f"{'='*60}")
        print(f"üß™ –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total}")
        print(f"{Colors.GREEN}‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {self.passed_count}{Colors.END}")
        print(f"{Colors.RED}‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {self.failed_count}{Colors.END}")
        print(f"{Colors.YELLOW}‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: {self.skipped_count}{Colors.END}")
        
        if self.failed_count == 0:
            print(f"\n{Colors.GREEN}{Colors.BOLD}üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!{Colors.END}")
        else:
            print(f"\n{Colors.RED}{Colors.BOLD}‚ö†Ô∏è  –ï–°–¢–¨ –ü–†–û–í–ê–õ–ï–ù–ù–´–ï –¢–ï–°–¢–´{Colors.END}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä
logger = TestLogger()

class TestClient:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API"""
    
    def __init__(self):
        self.token: Optional[str] = None
        self.headers: Dict[str, str] = {}
    
    def set_token(self, token: str):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        self.token = token
        self.headers = {"Authorization": f"Bearer {token}"}
        logger.log_info(f"–¢–æ–∫–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {token[:20]}...")
    
    async def request(self, method: str, url: str, expected_status: int = None, **kwargs):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            if self.token and "headers" not in kwargs:
                kwargs["headers"] = self.headers
            elif self.token and "headers" in kwargs:
                kwargs["headers"].update(self.headers)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
            logger.log_info(f"‚Üí {method} {url}")
            if kwargs.get("data"):
                logger.log_info(f"  –î–∞–Ω–Ω—ã–µ: {kwargs['data']}")
            if kwargs.get("files"):
                logger.log_info(f"  –§–∞–π–ª—ã: {list(kwargs['files'].keys())}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            async with httpx.AsyncClient(timeout=30.0) as client:
                response = await client.request(method, url, **kwargs)
                
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                logger.log_info(f"‚Üê –°—Ç–∞—Ç—É—Å: {response.status_code}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π —Å—Ç–∞—Ç—É—Å
                if expected_status and response.status_code != expected_status:
                    logger.log_error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å! –û–∂–∏–¥–∞–ª—Å—è {expected_status}, –ø–æ–ª—É—á–µ–Ω {response.status_code}")
                
                # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
                try:
                    response_data = response.json()
                    logger.log_info(f"  JSON: {response_data}")
                except:
                    logger.log_info(f"  –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ (–Ω–µ JSON): {response.text[:200]}...")
                
                return response
                
        except Exception as e:
            logger.log_error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ {method} {url}", e)
            raise

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–æ–≤
test_client = TestClient()

class TestHealthCheck:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—É—é —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å API"""
    
    async def test_root_endpoint(self):
        """–¢–µ—Å—Ç –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞"""
        logger.log_test_start("test_root_endpoint", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞")
        
        try:
            response = await test_client.request("GET", BASE_URL + "/", expected_status=200)
            
            if response.status_code != 200:
                logger.log_error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∫–æ–¥: {response.status_code}")
                return False
            
            data = response.json()
            if "message" not in data:
                logger.log_error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'message' –≤ –æ—Ç–≤–µ—Ç–µ", response_data=data)
                return False
            
            logger.log_success(f"–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç", {"message": data["message"]})
            return True
            
        except Exception as e:
            logger.log_error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –∫–æ—Ä–Ω–µ–≤–æ–º—É —ç–Ω–¥–ø–æ–∏–Ω—Ç—É", e)
            return False

class TestAuthEndpoints:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    
    async def test_login_invalid_credentials(self):
        """–¢–µ—Å—Ç –ª–æ–≥–∏–Ω–∞ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        logger.log_test_start("test_login_invalid_credentials", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –Ω–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        
        try:
            response = await test_client.request(
                "POST", 
                f"{API_V1}/auth/login",
                data={"username": "invalid_user", "password": "wrong_password"},
                expected_status=200
            )
            
            if response.status_code != 200:
                logger.log_error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {response.status_code}")
                return False
            
            data = response.json()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞
            if not isinstance(data.get("result"), bool):
                logger.log_error("–ü–æ–ª–µ 'result' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ boolean", response_data=data)
                return False
            
            if data["result"] is not False:
                logger.log_error("–û–∂–∏–¥–∞–ª—Å—è result=false –¥–ª—è –Ω–µ–≤–µ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö", response_data=data)
                return False
            
            if "error_code" not in data:
                logger.log_error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç error_code", response_data=data)
                return False
            
            logger.log_success("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã", {
                "error_code": data["error_code"],
                "message": data.get("message", "")
            })
            return True
            
        except Exception as e:
            logger.log_error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–µ–≤–µ—Ä–Ω—ã—Ö —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö", e)
            return False
    
    async def test_login_missing_data(self):
        """–¢–µ—Å—Ç –ª–æ–≥–∏–Ω–∞ –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö"""
        logger.log_test_start("test_login_missing_data", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
        
        try:
            response = await test_client.request(
                "POST", 
                f"{API_V1}/auth/login",
                data={},
                expected_status=422
            )
            
            if response.status_code == 422:
                logger.log_success("–í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ - 422 —Å—Ç–∞—Ç—É—Å")
                return True
            else:
                logger.log_error(f"–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 422, –ø–æ–ª—É—á–µ–Ω {response.status_code}")
                return False
                
        except Exception as e:
            logger.log_error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏", e)
            return False
    
    async def test_invite_token_invalid(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"""
        logger.log_test_start("test_invite_token_invalid", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è")
        
        try:
            response = await test_client.request(
                "GET", 
                f"{API_V1}/auth/invite/fake-token-12345",
                expected_status=200
            )
            
            if response.status_code != 200:
                logger.log_error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {response.status_code}")
                return False
            
            data = response.json()
            
            if data.get("result") is not False:
                logger.log_error("–û–∂–∏–¥–∞–ª—Å—è result=false –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞", response_data=data)
                return False
            
            if data.get("error_code") != "INVITE_NOT_FOUND":
                logger.log_error("–û–∂–∏–¥–∞–ª—Å—è error_code=INVITE_NOT_FOUND", response_data=data)
                return False
            
            logger.log_success("–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω", {
                "error_code": data["error_code"]
            })
            return True
            
        except Exception as e:
            logger.log_error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞", e)
            return False
    
    async def test_invite_list_no_auth(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        logger.log_test_start("test_invite_list_no_auth", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        
        try:
            async with httpx.AsyncClient() as client:
                response = await client.get(f"{API_V1}/auth/invite/list")
                
                if response.status_code == 401:
                    logger.log_success("–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
                    return True
                else:
                    logger.log_error(f"–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 401, –ø–æ–ª—É—á–µ–Ω {response.status_code}")
                    return False
                    
        except Exception as e:
            logger.log_error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞", e)
            return False
    
    async def test_invite_list_with_auth(self, admin_token):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π"""
        logger.log_test_start("test_invite_list_with_auth", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π")
        
        if not admin_token:
            logger.log_skip("–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return True
        
        try:
            response = await test_client.request(
                "GET", 
                f"{API_V1}/auth/invite/list",
                expected_status=200
            )
            
            if response.status_code != 200:
                logger.log_error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {response.status_code}")
                return False
            
            data = response.json()
            
            if data.get("result") is not True:
                logger.log_error("–û–∂–∏–¥–∞–ª—Å—è result=true", response_data=data)
                return False
            
            if "response" not in data:
                logger.log_error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'response'", response_data=data)
                return False
            
            response_data = data["response"]
            
            if "invites" not in response_data:
                logger.log_error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'invites'", response_data=data)
                return False
            
            if "pagination" not in response_data:
                logger.log_error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'pagination'", response_data=data)
                return False
            
            logger.log_success("–°–ø–∏—Å–æ–∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ", {
                "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": len(response_data["invites"]),
                "–ø–∞–≥–∏–Ω–∞—Ü–∏—è": response_data["pagination"]
            })
            return True
            
        except Exception as e:
            logger.log_error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π", e)
            return False

class TestUserEndpoints:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã"""
    
    async def test_me_no_auth(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        logger.log_test_start("test_me_no_auth", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ /me –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        
        try:
            async with httpx.AsyncClient() as client:
                response = await client.get(f"{API_V1}/users/me")
                
                if response.status_code == 401:
                    logger.log_success("–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
                    return True
                else:
                    logger.log_error(f"–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 401, –ø–æ–ª—É—á–µ–Ω {response.status_code}")
                    return False
                    
        except Exception as e:
            logger.log_error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ /me", e)
            return False
    
    async def test_me_with_auth(self, admin_token):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π"""
        logger.log_test_start("test_me_with_auth", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
        
        if not admin_token:
            logger.log_skip("–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return True
        
        try:
            response = await test_client.request(
                "GET", 
                f"{API_V1}/users/me",
                expected_status=200
            )
            
            if response.status_code != 200:
                logger.log_error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {response.status_code}")
                return False
            
            data = response.json()
            
            if data.get("result") is not True:
                logger.log_error("–û–∂–∏–¥–∞–ª—Å—è result=true", response_data=data)
                return False
            
            if "response" not in data:
                logger.log_error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'response'", response_data=data)
                return False
            
            user_data = data["response"]
            required_fields = ["id", "email", "username", "role"]
            
            for field in required_fields:
                if field not in user_data:
                    logger.log_error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ '{field}'", response_data=data)
                    return False
            
            logger.log_success("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ–ª—É—á–µ–Ω–∞", {
                "id": user_data["id"],
                "username": user_data["username"],
                "role": user_data["role"]
            })
            return True
            
        except Exception as e:
            logger.log_error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ", e)
            return False
    
    async def test_users_list_no_auth(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        logger.log_test_start("test_users_list_no_auth", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        
        try:
            async with httpx.AsyncClient() as client:
                response = await client.get(f"{API_V1}/users/")
                
                if response.status_code == 401:
                    logger.log_success("–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
                    return True
                else:
                    logger.log_error(f"–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 401, –ø–æ–ª—É—á–µ–Ω {response.status_code}")
                    return False
                    
        except Exception as e:
            logger.log_error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", e)
            return False
    
    async def test_users_list_with_auth(self, admin_token):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π"""
        logger.log_test_start("test_users_list_with_auth", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π")
        
        if not admin_token:
            logger.log_skip("–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return True
        
        try:
            response = await test_client.request(
                "GET", 
                f"{API_V1}/users/?skip=0&limit=5",
                expected_status=200
            )
            
            if response.status_code != 200:
                logger.log_error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {response.status_code}")
                return False
            
            data = response.json()
            
            if data.get("result") is not True:
                logger.log_error("–û–∂–∏–¥–∞–ª—Å—è result=true", response_data=data)
                return False
            
            response_data = data["response"]
            
            if "users" not in response_data:
                logger.log_error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'users'", response_data=data)
                return False
            
            if "pagination" not in response_data:
                logger.log_error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'pagination'", response_data=data)
                return False
            
            pagination = response_data["pagination"]
            required_pagination_fields = ["skip", "limit", "total"]
            
            for field in required_pagination_fields:
                if field not in pagination:
                    logger.log_error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ '{field}'", response_data=data)
                    return False
            
            logger.log_success("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ", {
                "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–≤_–æ—Ç–≤–µ—Ç–µ": len(response_data["users"]),
                "–ø–∞–≥–∏–Ω–∞—Ü–∏—è": pagination
            })
            return True
            
        except Exception as e:
            logger.log_error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", e)
            return False
    
    async def test_user_by_id_not_found(self, admin_token):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        logger.log_test_start("test_user_by_id_not_found", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        
        if not admin_token:
            logger.log_skip("–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return True
        
        try:
            response = await test_client.request(
                "GET", 
                f"{API_V1}/users/99999",
                expected_status=200
            )
            
            if response.status_code != 200:
                logger.log_error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {response.status_code}")
                return False
            
            data = response.json()
            
            if data.get("result") is not False:
                logger.log_error("–û–∂–∏–¥–∞–ª—Å—è result=false –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", response_data=data)
                return False
            
            if data.get("error_code") != "USER_NOT_FOUND":
                logger.log_error("–û–∂–∏–¥–∞–ª—Å—è error_code=USER_NOT_FOUND", response_data=data)
                return False
            
            logger.log_success("–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω", {
                "error_code": data["error_code"]
            })
            return True
            
        except Exception as e:
            logger.log_error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", e)
            return False
    
    async def test_students_list(self, admin_token):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤"""
        logger.log_test_start("test_students_list", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π")
        
        if not admin_token:
            logger.log_skip("–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return True
        
        try:
            response = await test_client.request(
                "GET", 
                f"{API_V1}/users/students?skip=0&limit=3",
                expected_status=200
            )

            if response.status_code != 200:
                logger.log_error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {response.status_code}")
                return False
            
            data = response.json()
            
            if data.get("result") is not True:
                logger.log_error("–û–∂–∏–¥–∞–ª—Å—è result=true", response_data=data)
                return False
            
            response_data = data["response"]
            
            if "students" not in response_data:
                logger.log_error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'students'", response_data=data)
                return False
            
            students = response_data["students"]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Ç—É–¥–µ–Ω—Ç—ã
            if students:
                student = students[0]
                if "user" not in student:
                    logger.log_error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'user' –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Å—Ç—É–¥–µ–Ω—Ç–∞", response_data=data)
                    return False
                
                if "student_info" not in student:
                    logger.log_error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'student_info' –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Å—Ç—É–¥–µ–Ω—Ç–∞", response_data=data)
                    return False
                
                logger.log_success("–°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π", {
                    "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": len(students),
                    "—Å—Ç—Ä—É–∫—Ç—É—Ä–∞": "user + student_info",
                    "–ø–∞–≥–∏–Ω–∞—Ü–∏—è": response_data.get("pagination", {})
                })
            else:
                logger.log_success("–°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –ë–î)", {
                    "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 0
                })
            
            return True
            
        except Exception as e:
            logger.log_error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤", e)
            return False

class TestFileEndpoints:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ–∞–π–ª–æ–≤—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã"""
    
    async def test_file_not_found_no_auth(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        logger.log_test_start("test_file_not_found_no_auth", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        
        try:
            async with httpx.AsyncClient() as client:
                response = await client.get(f"{API_V1}/files/99999")
                
                if response.status_code == 401:
                    logger.log_success("–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª–∞–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
                    return True
                else:
                    logger.log_error(f"–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 401, –ø–æ–ª—É—á–µ–Ω {response.status_code}")
                    return False
                    
        except Exception as e:
            logger.log_error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º", e)
            return False
    
    async def test_file_not_found_with_auth(self, admin_token):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π"""
        logger.log_test_start("test_file_not_found_with_auth", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞")
        
        if not admin_token:
            logger.log_skip("–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return True
        
        try:
            response = await test_client.request(
                "GET", 
                f"{API_V1}/files/99999",
                expected_status=200
            )
            
            if response.status_code != 200:
                logger.log_error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {response.status_code}")
                return False
            
            data = response.json()
            
            if data.get("result") is not False:
                logger.log_error("–û–∂–∏–¥–∞–ª—Å—è result=false –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞", response_data=data)
                return False
            
            if data.get("error_code") != "FILE_NOT_FOUND":
                logger.log_error("–û–∂–∏–¥–∞–ª—Å—è error_code=FILE_NOT_FOUND", response_data=data)
                return False
            
            logger.log_success("–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω", {
                "error_code": data["error_code"]
            })
            return True
            
        except Exception as e:
            logger.log_error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞", e)
            return False
    
    async def test_upload_valid_file(self, admin_token):
        """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        logger.log_test_start("test_upload_valid_file", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞")
        
        if not admin_token:
            logger.log_skip("–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return True
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
            test_content = b"Test file content for integration testing"
            files = {
                "file": ("test_integration.txt", io.BytesIO(test_content), "text/plain")
            }
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
            upload_response = await test_client.request(
                "POST", 
                f"{API_V1}/files/",
                files=files,
                expected_status=200
            )
            
            if upload_response.status_code != 200:
                logger.log_error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: —Å—Ç–∞—Ç—É—Å {upload_response.status_code}")
                return False
            
            upload_data = upload_response.json()
            
            if upload_data.get("result") is not True:
                logger.log_error("–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å", response_data=upload_data)
                return False
            
            if "response" not in upload_data:
                logger.log_error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'response' –≤ –æ—Ç–≤–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∫–∏", response_data=upload_data)
                return False
            
            file_info = upload_data["response"]
            file_id = file_info.get("id")
            
            if not file_id:
                logger.log_error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID —Ñ–∞–π–ª–∞ –≤ –æ—Ç–≤–µ—Ç–µ", response_data=upload_data)
                return False
            
            logger.log_success(f"–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ", {
                "file_id": file_id,
                "filename": file_info.get("filename", "unknown")
            })
            
            # –¢–µ–ø–µ—Ä—å –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª
            get_response = await test_client.request(
                "GET", 
                f"{API_V1}/files/{file_id}",
                expected_status=200
            )
            
            if get_response.status_code != 200:
                logger.log_error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞: —Å—Ç–∞—Ç—É—Å {get_response.status_code}")
                return False
            
            get_data = get_response.json()
            
            if get_data.get("result") is not True:
                logger.log_error("–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å", response_data=get_data)
                return False
            
            logger.log_success("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏", {
                "file_id": file_id,
                "filename": get_data["response"].get("filename", "unknown")
            })
            
            return True
            
        except Exception as e:
            logger.log_error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞", e)
            return False

async def get_admin_token():
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
    logger.log_info("üîê –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
    
    test_credentials = [
        {"username": "test_admin", "password": "admin123"},
        {"username": "admin", "password": "admin"},
        {"username": "admin", "password": "admin123"},
        {"username": "test_admin", "password": "password"},
    ]
    
    for i, creds in enumerate(test_credentials, 1):
        try:
            logger.log_info(f"–ü–æ–ø—ã—Ç–∫–∞ #{i}: {creds['username']}")
            
            async with httpx.AsyncClient() as client:
                response = await client.post(
                    f"{API_V1}/auth/login",
                    data=creds,
                    timeout=10.0
                )
                
                if response.status_code == 200:
                    result = response.json()
                    if result.get("result"):
                        token = result["response"]["access_token"]
                        test_client.set_token(token)
                        logger.log_success(f"–¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: {creds['username']}")
                        return token
                    else:
                        logger.log_warning(f"–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {creds['username']}")
                else:
                    logger.log_warning(f"HTTP {response.status_code} –¥–ª—è {creds['username']}")
                    
        except Exception as e:
            logger.log_warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ª–æ–≥–∏–Ω–∞ {creds['username']}: {str(e)}")
            continue
    
    logger.log_error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –ª—é–±—ã–º–∏ —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
    return None

async def run_all_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    print(f"{Colors.BOLD}{Colors.BLUE}üöÄ –®–ö–û–õ–¨–ù–´–ô –î–ù–ï–í–ù–ò–ö - –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ï –¢–ï–°–¢–´{Colors.END}")
    print(f"{Colors.CYAN}‚è∞ –ù–∞—á–∞–ª–æ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}{Colors.END}")
    print("="*60)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∞
    admin_token = await get_admin_token()
    
    if not admin_token:
        logger.log_warning("–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        logger.log_info("üí° –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python create_test_admin.py")
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–ª–∞—Å—Å–æ–≤
    health_tests = TestHealthCheck()
    auth_tests = TestAuthEndpoints()
    user_tests = TestUserEndpoints()
    file_tests = TestFileEndpoints()
    
    # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
    test_suite = [
        # Health Check
        ("üè• Health Check", [
            (health_tests.test_root_endpoint, [])
        ]),
        
        # Auth Tests
        ("üîê Authentication", [
            (auth_tests.test_login_invalid_credentials, []),
            (auth_tests.test_login_missing_data, []),
            (auth_tests.test_invite_token_invalid, []),
            (auth_tests.test_invite_list_no_auth, []),
            (auth_tests.test_invite_list_with_auth, [admin_token])
        ]),
        
        # User Tests
        ("üë• Users", [
            (user_tests.test_me_no_auth, []),
            (user_tests.test_me_with_auth, [admin_token]),
            (user_tests.test_users_list_no_auth, []),
            (user_tests.test_users_list_with_auth, [admin_token]),
            (user_tests.test_user_by_id_not_found, [admin_token]),
            (user_tests.test_students_list, [admin_token])
        ]),
        
        # File Tests
        ("üìÅ Files", [
            (file_tests.test_file_not_found_no_auth, []),
            (file_tests.test_file_not_found_with_auth, [admin_token]),
            (file_tests.test_upload_valid_file, [admin_token])
        ])
    ]
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã
    for category_name, tests in test_suite:
        print(f"\n{Colors.BOLD}{Colors.PURPLE}{'='*60}{Colors.END}")
        print(f"{Colors.BOLD}{Colors.PURPLE}{category_name} –¢–ï–°–¢–´{Colors.END}")
        print(f"{Colors.PURPLE}{'='*60}{Colors.END}")
        
        for test_func, args in tests:
            try:
                await test_func(*args)
            except Exception as e:
                logger.log_error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_func.__name__}", e)
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    logger.print_summary()
    
    print(f"\n{Colors.CYAN}‚è∞ –û–∫–æ–Ω—á–∞–Ω–∏–µ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}{Colors.END}")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    return 0 if logger.failed_count == 0 else 1

if __name__ == "__main__":
    exit_code = asyncio.run(run_all_tests())
    sys.exit(exit_code) 